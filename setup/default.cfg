#!/bin/bash
PROFILE_FILE="$HOME/.bashrc"

##################################################
# On Ubuntu, there's a clause in .bashrc to not load 
# .bashrc when called non-interactively. That means
# source ~/.bashrc does not work in our scripts. 
# This step removes that section of .basrhc
step_050_name="Bashrc patch"
step_050_cmd="sed -i '/If not running interactively/,+4 d' ~/.bashrc" 


##################################################
step_055_name="Git"
step_055_mode="interactive"
step_055_cmd=$(cat<<-EOF
    git config --global credential.helper store
    git config --global init.defaultBranch main
USER_NAME="\$(git config user.name)"
while [[ -z "\$USER_NAME" ]]; do 
        echo ""
        echo "Enter the user's Git name (e.g., Donald Duck): "  
        read USER_NAME
        git config --global user.name "\$USER_NAME"
        USER_NAME="\$(git config user.name)"
done

USER_EMAIL="$(git config user.email)"
while [[ -z "\$USER_EMAIL" ]]; do
        echo ""
        echo "Enter the user's Git email address (e.g., donald.duck@gmail.com): "  
        read USER_EMAIL
        git config --global user.email "\$USER_EMAIL"
        USER_EMAIL="\$(git config user.email)"
done
EOF
)


##################################################
step_060_name="Build tools"
step_060_cmd=$(cat<<-EOF
sudo apt install make
sudo apt-get install -y build-essential
EOF
)
step_060_bin="make"



##################################################
step_100_name="Go"
step_100_ver="go version | cut -d ' ' -f3"
step_100_bin="go"
step_100_cmd=$(cat<<-EOF
GO_VERSION="1.20.1"   

if [ "$ARCH" == "x86_64" ] && [ "$OS" == "Linux" ]; then
	go_filename="go\$GO_VERSION.linux-amd64.tar.gz"
fi 
if [ "$ARCH" == "arm" ] && [ "$OS" == "Linux" ]; then
	echo "Setting go filename"
	go_filename="go\$GO_VERSION.linux-arm64.tar.gz"
	echo "Set it to \$go_filename"
fi 

if [ "\$go_filename" == "" ]; then 
	echo "No go filename $ARCH $OS"
	exit 1
fi

cd /tmp
sudo rm -rf "$go_filename"
wget -q "https://golang.org/dl/\$go_filename"
sudo rm -rf /usr/local/go 
sudo tar -C /usr/local -xzf "\$go_filename"
sudo rm -rf "$go_filename"
echo 'export GOPATH=\$HOME/go' >> "$PROFILE_FILE"
echo 'export PATH=\$PATH:/usr/local/go/bin' >> "$PROFILE_FILE"
echo 'export PATH=\$PATH:\$HOME/go/bin' >> "$PROFILE_FILE"
EOF
)

##################################################
# NOTE: This must happen before protoc
# because mosh requires an older version of protoc to be installed
#step_149_name="mosh"
#step_149_cmd=$(cat<<-EOF
#sudo apt-get install debhelper autotools-dev protobuf-compiler libprotobuf-dev dh-autoreconf pkg-config libutempter-dev zlib1g-dev libncurses5-dev libssl-dev bash-completion locales -y
#cd /tmp
#git clone https://github.com/mobile-shell/mosh
#cd mosh
#./autogen.sh
#./configure
#make
#sudo make install
#EOF
#)
#step_149_bin="mosh"
#step_149_ver="mosh --version | head -1 | cut -d ' ' -f4"
#
##################################################
#step_150_name="protoc"
#step_150_ver="protoc --version | cut -d ' ' -f2"
#step_150_bin="protoc"
#step_150_cmd=$(cat<<-EOF
#    PROTOC_VERSION=22.0	
#    sudo apt-get install -y zip
#    PB_REL="https://github.com/protocolbuffers/protobuf/releases"
#    curl -LO "\$PB_REL/download/v\$PROTOC_VERSION/protoc-\$PROTOC_VERSION-linux-x86_64.zip"
#    sudo unzip -o protoc-\$PROTOC_VERSION-linux-x86_64.zip -d /usr/local
#    rm -f protoc-\$PROTOC_VERSION-linux-x86_64.zip
#    sudo chmod -R 775 /usr/local/bin
#    sudo chmod -R 777 /usr/local/include 
#EOF
#)
#
##################################################
step_400_name="protoc-gen-go"
step_400_cmd="go install google.golang.org/protobuf/cmd/protoc-gen-go@latest"
step_400_bin="protoc-gen-go"

##################################################
step_500_name="protoc-gen-go-grpc"
step_500_cmd="go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest"
step_500_bin="protoc-gen-go-grpc"
step_500_ver="protoc-gen-go-grpc --version | cut -d ' ' -f2"

##################################################
step_600_name="protoc-gen-grpc-gateway"
step_600_cmd="go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest"
step_600_bin="protoc-gen-grpc-gateway"

##################################################
step_900_name="gcloud SDK"
step_900_cmd=$(cat<<-EOF 
curl https://sdk.cloud.google.com > /tmp/install.sh
sudo bash /tmp/install.sh --disable-prompts --install-dir=/opt 
echo 'export PATH=\$PATH:/opt/google-cloud-sdk/bin' >> "$PROFILE_FILE"
EOF
)
step_900_bin="gcloud"
step_900_ver="gcloud --version | head -1 | cut -d ' ' -f 4"

##################################################
#step_1000_name="protoc-gen-validate"
#step_1000_cmd=$(cat<<-EOF
#echo "-----"
#echo "PATH=$PATH"
#echo "-----"
#echo "GOPATH=\$GOPATH"
#echo "-----"
#go get -d github.com/envoyproxy/protoc-gen-validate@v0.6.3
#cd "$HOME"/go/pkg/mod/github.com/envoyproxy/protoc-gen-validate@v0.6.3/
#sudo mkdir -p bin
#sudo chmod -R 777 bin
#sudo chmod -R 777 validate
#make build
#EOF
#)
#step_1000_bin="protoc-gen-validate"
##################################################
step_1100_name="gcc"
step_1100_cmd="sudo apt-get install -y build-essential"
step_1100_bin="gcc"
step_1100_ver="gcc --version | head -1 | cut -d ' ' -f4"

##################################################
#step_1400_name="buf"
#step_1400_cmd=$(cat<<-EOF
#sudo apt-get install -y jq
#BIN_DIR="/usr/local/bin" 
#VERSION="1.14.0" 
#BINARY_NAME="buf" 
#sudo rm "\${BIN_DIR}/\${BINARY_NAME}"
#sudo curl -sSL "https://github.com/bufbuild/buf/releases/download/v\${VERSION}/\${BINARY_NAME}-\$(uname -s)-\$(uname -m)" -o "\${BIN_DIR}/\${BINARY_NAME}" 
#sudo chmod +x "\${BIN_DIR}/\${BINARY_NAME}"
#BIN_DIR="/usr/local/bin" 
#VERSION="1.0.0-rc6" 
#BINARY_NAME="protoc-gen-buf-breaking" 
#sudo rm "\${BIN_DIR}/\${BINARY_NAME}"
#sudo curl -sSL "https://github.com/bufbuild/buf/releases/download/v\${VERSION}/\${BINARY_NAME}-$(uname -s)-$(uname -m)" -o "\${BIN_DIR}/\${BINARY_NAME}" 
#sudo chmod +x "\${BIN_DIR}/\${BINARY_NAME}"
#set +x
#EOF
#)
step_1400_name="buf"
step_1400_cmd="go install github.com/bufbuild/buf/cmd/buf@v1.14.0"
step_1400_bin="buf"
step_1400_ver="buf --version"
###################################################
step_1500_name="gopls"
step_1500_cmd=" go install golang.org/x/tools/gopls@latest"
step_1500_bin="gopls"
step_1500_ver="gopls version | head -1 | cut -d ' ' -f2"
##################################################
##################################################
step_1800_name="grpc-web"
step_1800_bin="protoc-gen-grpc-web"
step_1800_cmd=$(cat<<-EOF
cd /tmp
wget https://github.com/grpc/grpc-web/releases/download/1.3.0/protoc-gen-grpc-web-1.4.2-linux-x86_64
sudo mv protoc-gen-grpc-web-1.4.2-linux-x86_64 /usr/local/bin/protoc-gen-grpc-web
sudo chmod +x /usr/local/bin/protoc-gen-grpc-web
EOF
)
###################################################
step_2200_name="pandoc"
step_2200_bin="pandoc"
step_2200_ver="pandoc --version | head -1 | cut -d ' ' -f2"
step_2200_cmd="sudo apt install pandoc -y"


###################################################
step_2300_name="ispell"
step_2300_bin="ispell"
step_2300_ver="ispell -v | head -1 | cut -d ' ' -f5"
step_2300_cmd="sudo apt-get install ispell -y"

###################################################
# step_2400_name="kitty-terminfo"
# step_2400_cmd="sudo apt install kitty-terminfo"
###################################################
step_2500_name="Force color terminal"
step_2500_cmd=$(cat<<-EOF
sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/' "$PROFILE_FILE"
EOF
)
